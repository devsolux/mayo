name: macOS-conda arm64

on:
  release:
    types: [created]
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-macos-conda:
    runs-on: macos-14
    name: build-macos-qt5
    permissions:
      contents: write

    defaults:
      run:
        shell: bash -el {0}

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Get count of CPU cores
        id: cpu-cores
        uses: SimenB/github-actions-cpu-cores@v2

      - name: Set Conda Environment
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: "latest"
          auto-activate-base: false
          activate-environment: ci_macos_conda
          channels: conda-forge
          channel-priority: strict
          use-mamba: true
          cache-downloads: true

      - name: Install dependencies (Qt5, OCCT, Assimp, build tools)
        run: |
          mamba install -y \
            qt=5.* \
            occt \
            assimp \
            cmake \
            ninja \
            pkg-config
          echo "Conda prefix: $CONDA_PREFIX"
          qtpaths || true
          which macdeployqt || true
          macdeployqt -version || true
          cmake --version
          ninja --version

      - name: Configure and Build
        run: |
          set -euo pipefail
          mkdir -p build

          # Compute CMAKE_PREFIX_PATH from the active conda environment at runtime
          ASSIMP_CMAKE_DIR="$(find "$CONDA_PREFIX/lib/cmake" -maxdepth 1 -type d -name 'assimp*' | head -n1 || true)"
          CMAKE_PREFIX_PATH="$CONDA_PREFIX"
          [ -d "$CONDA_PREFIX/lib/cmake/Qt5" ] && CMAKE_PREFIX_PATH="$CONDA_PREFIX/lib/cmake/Qt5;$CMAKE_PREFIX_PATH"
          [ -d "$CONDA_PREFIX/lib/cmake/opencascade" ] && CMAKE_PREFIX_PATH="$CONDA_PREFIX/lib/cmake/opencascade;$CMAKE_PREFIX_PATH"
          [ -n "${ASSIMP_CMAKE_DIR:-}" ] && CMAKE_PREFIX_PATH="$ASSIMP_CMAKE_DIR;$CMAKE_PREFIX_PATH"
          export CMAKE_PREFIX_PATH
          echo "Using CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH"

          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DMayo_BuildTests=ON \
            -DMayo_BuildPluginAssimp=ON \
            -DCMAKE_PREFIX_PATH="$CMAKE_PREFIX_PATH"

          cmake --build build --parallel ${{ steps.cpu-cores.outputs.count }}

      - name: Run unit tests
        run: |
          set -e
          if ctest --test-dir build -C Release -N >/dev/null 2>&1; then
            ctest --test-dir build -C Release --output-on-failure
          elif [ -x build/test-mayo ]; then
            (cd build && ./test-mayo)
          else
            echo "No tests found."
          fi

      - name: Package .app and create .dmg
        id: package
        run: |
          set -euo pipefail

          APP_PATH="$(find build -maxdepth 3 -type d -name '*.app' -print -quit)"
          if [ -z "${APP_PATH}" ]; then
            echo "Failed to locate a .app bundle under build/"
            find build -maxdepth 3 -type d -print
            exit 1
          fi
          echo "Found app bundle: ${APP_PATH}"

          if ! command -v macdeployqt >/dev/null 2>&1; then
            echo "macdeployqt not found in PATH ($PATH)"
            exit 1
          fi

          APP_NAME="$(basename "${APP_PATH%.app}")"

          macdeployqt "$APP_PATH" -always-overwrite -verbose=2 -dmg

          DEFAULT_DMG="${APP_PATH%.app}.dmg"
          if [ -f "$DEFAULT_DMG" ]; then
            DMG_PATH="$DEFAULT_DMG"
          else
            DMG_PATH="$(find "$(dirname "$APP_PATH")" -maxdepth 1 -name '*.dmg' -print -quit || true)"
          fi

          if [ -z "${DMG_PATH:-}" ] || [ ! -f "$DMG_PATH" ]; then
            echo "Failed to find the generated DMG."
            find "$(dirname "$APP_PATH")" -maxdepth 2 -name '*.dmg' -print
            exit 1
          fi

          VERSION="${GITHUB_REF_NAME:-}"
          if [ -z "$VERSION" ] || ! echo "$VERSION" | grep -Eq '^v[0-9]+(\.[0-9]+)*$'; then
            VERSION="$(git describe --tags --abbrev=0 2>/dev/null || echo dev)"
          fi

          ARCH_LABEL="arm64"
          DEST_DIR="${GITHUB_WORKSPACE:-$PWD}"
          RENAMED_DMG="${DEST_DIR}/${APP_NAME}-${VERSION}-macOS-${ARCH_LABEL}.dmg"

          mv -f "$DMG_PATH" "$RENAMED_DMG"
          echo "Created DMG: $RENAMED_DMG"

          echo "dmg-path=$RENAMED_DMG" >> "$GITHUB_OUTPUT"
          echo "app-path=$APP_PATH" >> "$GITHUB_OUTPUT"

      - name: Publish Release assets (release event)
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ${{ steps.package.outputs.dmg-path }}
          fail_on_unmatched_files: true

      - name: Create or Update GitHub Release (tag push)
        if: startsWith(github.ref, 'refs/tags/') && github.event_name != 'release'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-rc') || contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha') }}
          generate_release_notes: true
          files: ${{ steps.package.outputs.dmg-path }}
          fail_on_unmatched_files: true